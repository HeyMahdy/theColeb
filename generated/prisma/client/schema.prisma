generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma/client"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                  @id @default(autoincrement())
  email                      String               @unique @db.VarChar(255)
  createdAt                  DateTime             @default(now())
  isEmailVerified            Boolean              @default(false)
  otp                        String?              @db.VarChar(6)
  otpExpiry                  DateTime?
  password                   String               @db.VarChar(255)
  role                       Role                 @default(USER)
  basicInfo                  BasicInfo?
  bioSummary                 BioSummary?
  collaboration              Collaboration?
  ParticipantA               Connection[]         @relation("ConnectionParticipantA")
  ParticipantB               Connection[]         @relation("ConnectionParticipantB")
  incomingConnections        IncomingConnection[] @relation("ReceivedConnections")
  sentIncomingConnections    IncomingConnection[] @relation("SentIncomingConnections")
  ReceiveoutgoingConnections OutgoingConnection[] @relation("ReceiveoutgoingConnections")
  outgoingConnections        OutgoingConnection[] @relation("SentConnections")
  posts                      Post[]
  projects                   Project[]
  showcase                   Showcase?
  technicalProfile           TechnicalProfile?
  visuals                    Visuals?

  @@map("users")
}

model BasicInfo {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  fullName  String  @db.VarChar(100)
  Institute String? @db.VarChar(100)
  major     String? @db.VarChar(100)
  location  String?
  user      User    @relation(fields: [userId], references: [id])

  @@map("basic_info")
}

model TechnicalProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  experienceLevel String?  @db.VarChar(50)
  skills          String[]
  user            User     @relation(fields: [userId], references: [id])

  @@map("technical_profile")
}

model BioSummary {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  shortBio String? @db.VarChar(500)
  tagline  String? @db.VarChar(255)
  user     User    @relation(fields: [userId], references: [id])

  @@map("bio_summary")
}

model Showcase {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  github    String? @db.VarChar(100)
  portfolio String? @db.VarChar(255)
  linkedin  String? @db.VarChar(100)
  email     String? @db.VarChar(100)
  whatsapp  String? @db.VarChar(100)
  user      User    @relation(fields: [userId], references: [id])

  @@map("showcase")
}

model Project {
  id          Int           @id @default(autoincrement())
  userId      Int
  name        String        @db.VarChar(100)
  description String?
  link        String?       @db.VarChar(255)
  techUsed    String[]
  status      ProjectStatus @default(finished)
  user        User          @relation(fields: [userId], references: [id])

  @@map("projects")
}

model Collaboration {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  openToCollaboration Boolean?
  ideaInterests       String?
  user                User     @relation(fields: [userId], references: [id])

  @@map("collaboration")
}

model Visuals {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  profilePicture String? @db.VarChar(255)
  coverImage     String? @db.VarChar(255)
  user           User    @relation(fields: [userId], references: [id])

  @@map("visuals")
}

model Post {
  id          Int              @id @default(autoincrement())
  userId      Int
  title       String           @db.VarChar(255)
  description String?
  createdAt   DateTime         @default(now())
  type        PostType         @default(COFOUNDER_NEEDED)
  interested  InterestedList[]
  user        User             @relation(fields: [userId], references: [id])

  @@map("post")
}

model InterestedList {
  id     Int  @id @default(autoincrement())
  postId Int
  post   Post @relation(fields: [postId], references: [id])

  @@map("interested_list")
}

model IncomingConnection {
  id          Int      @id @default(autoincrement())
  senderId    Int
  requestedAt DateTime @default(now())
  receiverId  Int
  receiver    User     @relation("ReceivedConnections", fields: [receiverId], references: [id])
  sender      User     @relation("SentIncomingConnections", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
  @@map("incoming_connection")
}

model OutgoingConnection {
  id          Int      @id @default(autoincrement())
  receiverId  Int
  requestedAt DateTime @default(now())
  senderId    Int
  sender      User     @relation("ReceiveoutgoingConnections", fields: [receiverId], references: [id])
  receiver    User     @relation("SentConnections", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
  @@map("outgoing_connection")
}

model Connection {
  id             Int      @id @default(autoincrement())
  connectedAt    DateTime @default(now())
  participantAId Int
  participantBId Int
  participantA   User     @relation("ConnectionParticipantA", fields: [participantAId], references: [id])
  participantB   User     @relation("ConnectionParticipantB", fields: [participantBId], references: [id])

  @@unique([participantAId, participantBId])
  @@map("connections")
}

enum PostType {
  IDEA
  MVP
  COFOUNDER_NEEDED
  OTHER
  MEETUP
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  running
  finished
  incomplete
}
